<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Björn Tillenius</title>
        <description>Blogging about stuffs</description>      
        <link>http://tillenius.me</link>
        <atom:link href="http://tillenius.me/feed.xml" rel="self" type="application/rss+xml" />
        
            <item>
                <title>Enabling middleclick scrolling in Ubuntu for Lenovo clickpads</title>
                <description>&lt;p&gt;The short version is that if you want to enable middleclick scrolling
for Lenovo clickpads in Ubuntu, do this in a terminal:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo add-apt-repository ppa:bjornt/evdev
sudo apt-get update
sudo apt-get dist-upgrade
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The commands above should upgrade the &lt;code&gt;xserver-xorg-input-evdev&lt;/code&gt; package,
as well as remove the &lt;code&gt;xserver-xorg-input-synaptics&lt;/code&gt; and
&lt;code&gt;xserver-xorg-input-all&lt;/code&gt; packages.&lt;/p&gt;

&lt;p&gt;Next you need to create a file at
&lt;code&gt;/usr/share/X11/xorg.conf.d/90-clickpad.conf&lt;/code&gt; with the following contents:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Section &amp;quot;InputClass&amp;quot;
    Identifier &amp;quot;Clickpad&amp;quot;
    MatchIsTouchpad &amp;quot;on&amp;quot;
    MatchDevicePath &amp;quot;/dev/input/event*&amp;quot;
    Driver &amp;quot;evdev&amp;quot;
    # Synaptics options come here.
    Option &amp;quot;Clickpad&amp;quot; &amp;quot;true&amp;quot;
    option &amp;quot;EmulatedMidButtonTime&amp;quot; &amp;quot;0&amp;quot;
    Option &amp;quot;SoftButtonAreas&amp;quot; &amp;quot;65% 0 0 40% 42% 65% 0 40%&amp;quot;
    Option &amp;quot;AreaBottomEdge&amp;quot; &amp;quot;0%&amp;quot;
EndSection

Section &amp;quot;InputClass&amp;quot;
    Identifier   &amp;quot;TrackPoint&amp;quot;
    MatchProduct &amp;quot;TrackPoint&amp;quot;
    MatchDriver  &amp;quot;evdev&amp;quot;
    Option       &amp;quot;EmulateWheel&amp;quot;       &amp;quot;1&amp;quot;
    Option       &amp;quot;EmulateWheelButton&amp;quot; &amp;quot;2&amp;quot;
    Option       &amp;quot;XAxisMapping&amp;quot;       &amp;quot;6 7&amp;quot;
EndSection
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The interesting options are &lt;code&gt;SoftButtonAreas&lt;/code&gt; and &lt;code&gt;AreaBottomEdge&lt;/code&gt;.
&lt;code&gt;SoftButtonAreas&lt;/code&gt; specifies where the buttons should be. If you want the
buttons at the top, itt should generally be in the form &lt;code&gt;&amp;quot;R 0 0 H L R 0 H&amp;quot;&lt;/code&gt;,
where &lt;code&gt;R&lt;/code&gt; is where the border between the middle and right buttons, &lt;code&gt;H&lt;/code&gt;
is the height of the buttons, and &lt;code&gt;L&lt;/code&gt; is the border between the middle and
left buttons.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;AreaBottomEdge&lt;/code&gt; turns off the touchpad, expect for clicking. If you
want to keep using the touchpad, you can instead specify &lt;code&gt;AreaTopEdge&lt;/code&gt;,
with the same value you use for &lt;code&gt;H&lt;/code&gt;. That would enable the touchpad below
the buttons.&lt;/p&gt;

&lt;p&gt;Unfortunately, you can&amp;#39;t specify where the left button should be,
instead if occupies everything that isn&amp;#39;t the middle or right button.
This is a bit annoying, since at least I tend to touch the touchpad with
my palm when reaching for the middle button, which will result in a left
click being registered instead of a middle click.&lt;/p&gt;

&lt;p&gt;I created this package because Ubuntu doesn&amp;#39;t quite support the
clickpads that come in the newer Lenovo laptops. Ubuntu does support
clickpads, and with the &lt;code&gt;SoftButtonAreas&lt;/code&gt; config settings it&amp;#39;s possible to
have three soft buttons on the clickpad where the real buttons used to
be. However, what&amp;#39;s not supported out of the box is middleclick
scrolling, where you hold the middle button and scroll with the
trackpoint.&lt;/p&gt;

&lt;p&gt;The main problem is that the clickpad is driven by &lt;code&gt;synaptics&lt;/code&gt; and
the trackpoint by &lt;code&gt;evdev&lt;/code&gt;, and they can&amp;#39;t communicate to generate the
scroll events. Bae Taegil &lt;a href=&quot;https://aur.archlinux.org/packages/xf86-input-evdev-trackpoint/&quot;&gt;patched the &lt;code&gt;evdev&lt;/code&gt; driver&lt;/a&gt; to basically include
the &lt;code&gt;synaptics&lt;/code&gt; driver. I&amp;#39;ve taken that patch and generated a package for
Ubuntu 14.04. I&amp;#39;ve only added a package for Trusty, but I could add packages
for other releases if needed. I will most likely add one for Utopic,
when it becomes more stable.&lt;/p&gt;
</description>
                <pubDate>Tue, 19 Aug 2014 11:30:00 +0300</pubDate>
                <link>http://tillenius.me/blog/2014/08/19/ubuntu-clickpad-middle-scroll</link>
                <guid isPermaLink="true">http://tillenius.me/blog/2014/08/19/ubuntu-clickpad-middle-scroll</guid>
            </item>
        
            <item>
                <title>Using web.go on Google App Engine</title>
                <description>&lt;p&gt;In short, if you want to use &lt;a href=&quot;http://www.getwebgo.com/&quot;&gt;&lt;code&gt;web.go&lt;/code&gt;&lt;/a&gt; in
&lt;a href=&quot;http://code.google.com/appengine/docs/go/overview.html&quot;&gt;Google App Engine&amp;#39;s Go runtime environment&lt;/a&gt;, check out
&lt;a href=&quot;https://github.com/bjornt/web.go/tree/google-app-engine&quot;&gt;my &lt;code&gt;google-app-engine&lt;/code&gt; branch of &lt;code&gt;web.go&lt;/code&gt;&lt;/a&gt;.
Using that one you can start using &lt;code&gt;web.go&lt;/code&gt; like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package webgoexample

import (
    &amp;quot;http&amp;quot;
    &amp;quot;log&amp;quot;
    &amp;quot;os&amp;quot;
    &amp;quot;web&amp;quot;
)

var server *web.Server

func init() {
    server = &amp;amp;web.Server{
        Config: web.Config,
        Logger: log.New(os.Stdout, &amp;quot;&amp;quot;, log.Ldate|log.Ltime)}
    server.Get(&amp;quot;/&amp;quot;, func(ctx *web.Context) {
        ctx.Write([]uint8(&amp;quot;Hello from web.go!&amp;quot;))
    })

    // Send all requests to web.go.
    http.HandleFunc(&amp;quot;/&amp;quot;, handler)
}

func handler(writer http.ResponseWriter, request *http.Request) {
    server.ServeHTTP(writer, request)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;BTW, if you simply put the &lt;a href=&quot;http://www.getwebgo.com/&quot;&gt;&lt;code&gt;web.go&lt;/code&gt;&lt;/a&gt; branch in your root dir,
you have to remove the &lt;code&gt;examples/&lt;/code&gt; directory, otherwise &lt;a href=&quot;http://code.google.com/appengine/&quot;&gt;App Engine&lt;/a&gt; won&amp;#39;t be able to compile your
project.&lt;/p&gt;

&lt;p&gt;The branch in question has quite minimal changes to &lt;code&gt;web.go&lt;/code&gt;, but I haven&amp;#39;t
proposed to merge it to trunk yet, since it removes some functionality. First
of all I changed it not to set up &lt;code&gt;/debug/&lt;/code&gt; paths, so that I could remove the
use of &lt;code&gt;http/pprof&lt;/code&gt;, since it&amp;#39;s not available on &lt;a href=&quot;http://code.google.com/appengine/&quot;&gt;App Engine&lt;/a&gt;. After that I had
to also remove the use of &lt;code&gt;net.ResolveTCPAddr&lt;/code&gt;, which is also not available on
App Engine. I basically replaced it with &lt;code&gt;net.SplitHostPort&lt;/code&gt;, which I suspect
is good enough. It doesn&amp;#39;t resolve host names and port names, but I&amp;#39;d be
surprised if &lt;code&gt;hr.RemoteAddr&lt;/code&gt; wouldn&amp;#39;t be an IP address and a port number.&lt;/p&gt;
</description>
                <pubDate>Mon, 07 Nov 2011 15:50:46 +0200</pubDate>
                <link>http://tillenius.me/blog/2011/11/07/using-webgo-on-google-app-engine</link>
                <guid isPermaLink="true">http://tillenius.me/blog/2011/11/07/using-webgo-on-google-app-engine</guid>
            </item>
        
            <item>
                <title>formataddr() and unicode</title>
                <description>&lt;p&gt;I often see code like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;message[&amp;quot;To&amp;quot;] = formataddr((name, email))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This looks like it should work, especially since the docstring of &lt;code&gt;formataddr()&lt;/code&gt;
says that it will return a string value suitable for a &lt;code&gt;To&lt;/code&gt; or &lt;code&gt;Cc&lt;/code&gt; header.
However, while it works most of the time, it fails if &lt;code&gt;name&lt;/code&gt; is a
unicode string containing non-ascii characters. It may look ok if you look
simply read &lt;code&gt;message[&amp;quot;To&amp;quot;]&lt;/code&gt;, but as soon as you convert the message or header to
a byte string, you will see the problem.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; from email.Message import Message
&amp;gt;&amp;gt;&amp;gt; from email.Utils import formataddr
&amp;gt;&amp;gt;&amp;gt; msg = Message()
&amp;gt;&amp;gt;&amp;gt; msg[&amp;quot;To&amp;quot;] = formataddr((u&amp;quot;Björn&amp;quot;, &amp;quot;bjorn@tillenius.me&amp;quot;))
&amp;gt;&amp;gt;&amp;gt; msg[&amp;quot;To&amp;quot;]
u&amp;#39;Bj\xf6rn &amp;lt;bjorn@tillenius.me&amp;gt;&amp;#39;
&amp;gt;&amp;gt;&amp;gt; msg.as_string()
&amp;#39;To: =?utf-8?b?QmrDtnJuIDxiam9ybkB0aWxsZW5pdXMubWU+?=\n\n&amp;#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Most code that will use the &lt;code&gt;To&lt;/code&gt; address in the example will fail, since there&amp;#39;s no visible e-mail address in there. The header should look like this, i.e. only the name itself should be encoded:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;To: =?utf-8?b?QmrDtnJu?= &amp;lt;bjorn@tillenius.me&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I wish Python would handle this better. I usually end up writing a helper
function like this for projects I work on:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;def format_address(name, email):
    email = str(email)
    if not name:
        return email
    name = str(Header(name))
    return formataddr((name, email))
&lt;/code&gt;&lt;/pre&gt;
</description>
                <pubDate>Fri, 11 Feb 2011 16:44:07 +0200</pubDate>
                <link>http://tillenius.me/blog/2011/02/11/formataddr-and-unicode</link>
                <guid isPermaLink="true">http://tillenius.me/blog/2011/02/11/formataddr-and-unicode</guid>
            </item>
        
            <item>
                <title>Problems with drive-by fixes</title>
                <description>&lt;p&gt;To start with, I think drive-by fixes are great. If you see that 
something is wrong when fixing something else, it can be a good idea to
fix it right away, since otherwise you probably won&amp;#39;t do it.&lt;/p&gt;

&lt;p&gt;However, even when doing drive-by fixes, I still think that &lt;strong&gt;each
landed branch should focus on one thing only.&lt;/strong&gt; As soon as you start to
group unrelated things together, you make more work for others. It might
be easier for you, but think about all the people that are going to look
at your changes. Please, don&amp;#39;t be lazy! It doesn&amp;#39;t take much work to
extract the drive-by fix into a separate branch, and most importantly to
land it separately. If you do find that it&amp;#39;s too time-consuming to do this, let&amp;#39;s talk, and see what is taking time. There should be something we can do to make it easier.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;There&amp;#39;s no such thing as a risk-free drive-by fix.&lt;/strong&gt; There&amp;#39;s always the
potential of something going wrong (even if the application is 
well-tested). When something goes wrong, someone needs to go back and 
look at what was done. Now, if you land the drive-by fix together with 
unrelated (or even related) changes, you basically hide it. By reducing
your workload slightly, you create much more work for someone else.&lt;/p&gt;

&lt;p&gt;For example, on Friday I saw that we had some problems with scripts in 
&lt;a href=&quot;https://launchpad.net&quot;&gt;Launchpad&lt;/a&gt;. They were trying to write to a mail
directory, to which they didn&amp;#39;t have access. That was odd, since scripts have
always talked to the SMTP servers directly, and didn&amp;#39;t use the queued mailer
that needed write access to that directory. Looking through the recent commit
logs didn&amp;#39;t reveal anything. Luckily enough, William Grant pointed out that 
&lt;a href=&quot;http://bazaar.launchpad.net/%7Elaunchpad-pqm/launchpad/db-devel/revision/9205&quot;&gt;&lt;code&gt;r9205&lt;/code&gt; of &lt;code&gt;db-devel&lt;/code&gt;&lt;/a&gt;
contained a change to &lt;code&gt;sendmail.py&lt;/code&gt;, which probably was the cause of the
problems. This turned out to be correct, but it was still pretty much 
impossible to see why that change was made. I decided that the best thing
to do was to revert the change, but I wasn&amp;#39;t sure exactly what to 
revert. That diff of that revision is more than 4000 lines, and more 
than 70 files were changed. So how can I know which other files were 
change to accommodate the change in &lt;code&gt;sendmail.py&lt;/code&gt;. I tried looking at 
the commit logs, but that didn&amp;#39;t reveal much. The only thing I could do 
was to revert the change in &lt;code&gt;sendmail.py&lt;/code&gt; and send it off to ec2, 
waiting three hours to see if anything broke.
So, I plead again, if you do drive-by fixes (and you should), &lt;strong&gt;please spend a few minutes extra, to extract the fix into a separate branch, and land it separately!&lt;/strong&gt; 
Is there maybe anything we can do to make this easier to do?&lt;/p&gt;
</description>
                <pubDate>Mon, 03 May 2010 15:10:47 +0300</pubDate>
                <link>http://tillenius.me/blog/2010/05/03/problems-with-drive-by-fixes</link>
                <guid isPermaLink="true">http://tillenius.me/blog/2010/05/03/problems-with-drive-by-fixes</guid>
            </item>
        
            <item>
                <title>RFC: Expose features to users when they are done, not once a month</title>
                <description>&lt;p&gt;I&amp;#39;ve been working on &lt;a href=&quot;https://dev.launchpad.net/MergeWorkflowDraft&quot;&gt;a new release/merge workflow&lt;/a&gt; for Launchpad.
I&amp;#39;ve written it from the developers&amp;#39; point of view, but I&amp;#39;d love some
comments from users of &lt;code&gt;launchpad.net&lt;/code&gt;, so let me try to explain how you, as
users, would be affected by this change.&lt;/p&gt;

&lt;p&gt;The proposal is that we would decouple our feature development cycles
from our release cycles. We would more or less get rid of our releases,
and push features to our users when they are ready to be used. Every
feature would first go to &lt;code&gt;edge.launchpad.net&lt;/code&gt;, and when it&amp;#39;s considered
good enough, it will get pushed to &lt;code&gt;launchpad.net&lt;/code&gt; for everyone to use.
Bug fixes would also go to &lt;code&gt;edge.launchpad.net&lt;/code&gt; first, and pushed to
&lt;code&gt;launchpad.net&lt;/code&gt; when they are confirmed to work. Sadly, Launchpad will still go down once a month for updating DB and other regular maintenance, just like before. The amount (and frequency) of downtime would stay the same as before.&lt;/p&gt;

&lt;p&gt;There are users who are in our beta team and use &lt;code&gt;edge.launchpad.net&lt;/code&gt;
all the time, and those who want a more stable Launchpad, and use
&lt;code&gt;launchpad.net&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;Users of &lt;code&gt;launchpad.net&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;Those who aren&amp;#39;t in the beta team would get bug fixes sooner than with
the current workflow. Instead of having to wait for the end of the
release cycle, they will get it as soon as the fix has been confirmed to
work on &lt;code&gt;edge.launchpad.net&lt;/code&gt;. The same is true for features, kind of.
These users would have to wait a bit longer than today, since today we
push even unfinished features to &lt;code&gt;launchpad.net&lt;/code&gt; users at the end of the
release cycle. With the new workflow, these users would have to wait for
the feature to be considered complete, but in return these user should get
a better experience when seeing the feature for the first time.&lt;/p&gt;

&lt;p&gt;One potential source of problem is that even though fixes and features
get tested on &lt;code&gt;edge.launchpad.net&lt;/code&gt;, before going to &lt;code&gt;launchpad.net&lt;/code&gt;,
with each update there is the potential of some other issue being introduced. For example, fixing a layout bug on one page, might make another page look different.
With the current workflow this happens only once a month, instead of a
few times every month with the new workflow. That said, even today we
update &lt;code&gt;launchpad.net&lt;/code&gt; multiple times every month, to fix more serious
issues.&lt;/p&gt;

&lt;h2&gt;Users of &lt;code&gt;edge.launchpad.net&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;If you are in the beta team, and use &lt;code&gt;edge.launchpad.net&lt;/code&gt; on a regular
basis, it won&amp;#39;t be that different from how it works today. Just like today, you
would be exposed to features that are under development. What would
change is that we will try to do a better job at telling you which
features that are on &lt;code&gt;edge.launchpad.net&lt;/code&gt; only. This way you will have a
better chance at actually helping us test and use the features, and
tell us about any problems, so that we can fix it right away. This
should make you more aware of new features that are being added to Launchpad, and provide a better opportunity for you to make it better.&lt;/p&gt;

&lt;p&gt;One potential source of problem here is that developers will know that
their work won&amp;#39;t end up on &lt;code&gt;launchpad.net&lt;/code&gt;, before they say it&amp;#39;s ready,
so they push more rough features to &lt;code&gt;edge.launchpad.net&lt;/code&gt;. Thus it could be
a more rockier ride than today. But of course, our developers care a lot 
about their users, so they won&amp;#39;t land their work, unless it&amp;#39;s really good! :-)&lt;/p&gt;

&lt;h2&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;My hope is that this will provide a better and stable experience for users of &lt;code&gt;launchpad.net&lt;/code&gt;, and provide users of &lt;code&gt;edge.launchpad.net&lt;/code&gt; a better opportunity to help us making new features rock! But I&amp;#39;m interested to hear what you, the actual users, think about this.&lt;/p&gt;
</description>
                <pubDate>Thu, 04 Mar 2010 20:56:41 +0200</pubDate>
                <link>http://tillenius.me/blog/2010/03/04/expose-features-when-they-are-done</link>
                <guid isPermaLink="true">http://tillenius.me/blog/2010/03/04/expose-features-when-they-are-done</guid>
            </item>
        
            <item>
                <title>Technical Architect Roadmap</title>
                <description>&lt;p&gt;I made the transition from the Bugs team lead to the Launchpad Technical Architect quite a
while ago. While the first time was spent mainly on satisfying my
coding desires, it&amp;#39;s time to define what I&amp;#39;m going to spend my time as
technical architect! My road map that shows the high level things that
I&amp;#39;ll be focusing on is available here:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://dev.launchpad.net/TechnicalArchitect&quot;&gt;https://dev.launchpad.net/TechnicalArchitect&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I&amp;#39;ll also be writing blog posts (and sending mails to the launchpad-dev
mailing list of course) regularly to keep people updated with my
progress and findings. My blog is at &lt;a href=&quot;http://tillenius.me/&quot;&gt;http://tillenius.me/&lt;/a&gt; and I tag all
posts related to Launchpad with &lt;a href=&quot;http://tillenius.me/blog/tag/launchpad/&quot;&gt;&lt;code&gt;launchpad&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I&amp;#39;m currently working on &lt;a href=&quot;https://dev.launchpad.net/LEP/ReleaseFeaturesWhenTheyAreDone&quot;&gt;decoupling our feature development cycles with
our release cycles&lt;/a&gt;, which I do mainly, because I think it&amp;#39;s important, not because it&amp;#39;s part of the technical architect&amp;#39;s responsibility.
But in parallel with that my next task is to set up a team that can help
me doing a good job. I&amp;#39;ll expand more about the team in another post,
but in short it will consist of members from each sub-team in Launchpad.
It will act as a forum to discuss what needs my attention, and they will
also help me figuring out solutions to problems, and help me implement
the solutions.&lt;/p&gt;

&lt;p&gt;One of the first major tasks will be to come up with a testing strategy.
Currently when we write tests we don&amp;#39;t think that much about it.
Everyone have their preferences, and we have a wide variety of testing
styles, making it hard to find which code paths are exercised by which
tests, and how good test coverage we have. This leads to us sometimes having
bad test coverage, and some times having too much test
coverage, i.e. we have redundant tests that make the test suite slower.
Coming up with guidelines on how to write tests, which kind of tests to
write, where to place them, etc., is the first step. But we also need to
figure out how to make our test suite faster, what kind of documentation to 
provide, and so on.&lt;/p&gt;

&lt;p&gt;In addition to the tasks on the roadmap, I also have a number of things I do on a regular basis. This includes reviewing database patches for API consistency, help teams design features from a technical point of view, keep my eyes open for areas in the code that need refactoring and clean-up.&lt;/p&gt;
</description>
                <pubDate>Wed, 24 Feb 2010 14:12:23 +0200</pubDate>
                <link>http://tillenius.me/blog/2010/02/24/technical-architect-roadmap</link>
                <guid isPermaLink="true">http://tillenius.me/blog/2010/02/24/technical-architect-roadmap</guid>
            </item>
        
            <item>
                <title>Windmill - so far, so good</title>
                <description>&lt;p&gt;We&amp;#39;ve used Windmill in our Launchpad buildbots for a while now, and it&amp;#39;s actually
worked out quite well. I was afraid that we would have a lot of fallout,
since in the beginning Windmill was fragile and caused a lot of
intermittent test failure. However, so far I&amp;#39;d said that we&amp;#39;ve had very
little problems. There was one intermittent failure, but it was known
from the beginning that it would fail eventually. Apart from that we&amp;#39;ve
had only one major issue, and that&amp;#39;s that something is using 100% CPU
when our combined Javascript file is bigger than 512 000 bytes. This
stopped people from landing Javascript additions for a while, and we
still haven&amp;#39;t resolved this issue, apart from making the file smaller.&lt;/p&gt;

&lt;p&gt;There are some things that would be nice to improve with regards to
Windmill. The most important thing is to make sure that launchpad.js can
be bigger than 512 000 bytes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://launchpad.net/bugs/519744&quot;&gt;https://launchpad.net/bugs/519744&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It would also be nice to make the test output nicer. At the moment
Windmill logs quite a lot to stderr, making it look like the test
failed, even though it didn&amp;#39;t. We don&amp;#39;t want Windmill to log anything
really, unless it&amp;#39;s a critical failure:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://launchpad.net/bugs/494519&quot;&gt;https://launchpad.net/bugs/494519&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I was going to say that we also have some problems related to logging in
(because we look at a possibly stale page to decide whether the user is
logged in), but it seems like Salgado already fixed it!&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://launchpad.net/bugs/515494&quot;&gt;https://launchpad.net/bugs/515494&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It would also be nice to investigate whether the problem with asserting
a node directly after waiting for it sometimes fails. We had problems
like that before; code was waiting for an element, and when using
assertNode directly after the wait, the node still didn&amp;#39;t exist. I
haven&amp;#39;t seen any test fail like that lately, so it might have been fixed
somehow:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://launchpad.net/bugs/487666&quot;&gt;https://launchpad.net/bugs/487666&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There are some other things I could think of that would be nice to have.
I haven&amp;#39;t found any bugs filed for them, but I&amp;#39;ll list them here.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Don&amp;#39;t run the whole test suite under xvfb-run. It&amp;#39;d be better to   start xvfb only for the Windmill tests.&lt;/li&gt;
&lt;li&gt;Use xvfb by default for Windmill tests. When running the Windmill      tests it&amp;#39;s quite annoying to have Firefox pop up now and then. It&amp;#39;d      be better to run them headless by default.&lt;/li&gt;
&lt;li&gt;Switches for making debugging easier. Currently we shut down      Firefox after running the Windmill tests. It should be possible to      have Firefox remain running after the test has finished running, so that you can manually poke around if you want to. If we use xvfb by default, we also need a switch for not using it.&lt;/li&gt;
&lt;/ul&gt;
</description>
                <pubDate>Wed, 10 Feb 2010 14:51:17 +0200</pubDate>
                <link>http://tillenius.me/blog/2010/02/10/windmill-so-far-so-good</link>
                <guid isPermaLink="true">http://tillenius.me/blog/2010/02/10/windmill-so-far-so-good</guid>
            </item>
        
            <item>
                <title>Block on test failures</title>
                <description>&lt;p&gt;I can&amp;#39;t stress enough how important it is to automatically block, stop
the line,  when a regression occurs. Forcing someone to take action.
Don&amp;#39;t think it&amp;#39;s enough to have tests to catch regressions. It won&amp;#39;t
help you much, unless you run them automatically, and most importantly,
block on test failures, forcing someone to fix them.&lt;/p&gt;

&lt;p&gt;In Launchpad we have been quite good at this in the past. Already from
the beginning we ran the whole test suite before every commit. If a test
failed, the commit wasn&amp;#39;t made, and the committer had to make the test
pass before being able to commit those changes to the mainline. Now we
have something similar. For performance reasons, instead of running the
tests before the commit, we run them after. If a test fail, we enter
&lt;em&gt;testfix mode&lt;/em&gt;, blocking all commits to mainline, until the test passes
again.&lt;/p&gt;

&lt;p&gt;But, when we decided to bring in AJAX into the equation, we failed to do
the same for the new test infrastructure we added. We use Windmill to
test our AJAX functionality, and since it was a bit flaky, and it wasn&amp;#39;t
trivial to integrate it into our existing test suite, we thought it was
enough to be able to run the tests manually to avoid regressions. This
was a big mistake. Not many people are going to run the tests manually,
so regressions are bound to sneak in without you noticing it. Believe
me, I know. I integrated the Windmill tests into our normal
&lt;code&gt;zope.testing&lt;/code&gt; test runner. When I did this, I found out that a lot
of our Windmill tests were actually failing. We set up a buildbot 
builder to run the Windmill automatically, hoping that it would make
regressions less likely to be introduced without us knowing about it. It
helped a bit, we actually did catch a few regressions, but it was hard
manual work. It required someone (me!) to keep an eye on the buildbot
runs, looking through the test log, and chase people to fix it.  This
led to having not all the tests passing most of the time, which made it
even harder to notice new regressions. So while simply having the tests
run automatically helps a bit, it still requires a lot of discipline and
manual work to prevent regressions from being unnoticed.&lt;/p&gt;

&lt;p&gt;That&amp;#39;s why I&amp;#39;m pleased to announce, that &lt;strong&gt;Windmill tests are now 
included in the regular Launchpad test suite&lt;/strong&gt;, which means that when a
Windmill test fails, we will enter &lt;em&gt;testfix mode&lt;/em&gt; and we&amp;#39;re forced to
take action. It will be a bit painful in the beginning. I&amp;#39;m sure that we
will see some spurious test failures. However, I&amp;#39;m sure it will be less
painful that it has been to keep the current Windmill test suite under
control.&lt;/p&gt;

&lt;p&gt;The next time you add new testing infrastructure, let&amp;#39;s include it in
the regular test suite from the beginning, OK?&lt;/p&gt;
</description>
                <pubDate>Mon, 21 Dec 2009 16:28:25 +0200</pubDate>
                <link>http://tillenius.me/blog/2009/12/21/block-on-test-failures</link>
                <guid isPermaLink="true">http://tillenius.me/blog/2009/12/21/block-on-test-failures</guid>
            </item>
        
            <item>
                <title>Think about integration issues</title>
                <description>&lt;p&gt;When doing work on something that is supposed to be used by others, don&amp;#39;t forget to think about how it&amp;#39;s actually going to be used. Not
only to think about it, but to actually try it out, to confirm that it
works nicely when integrated, and that it&amp;#39;s easy to integrate
it. And let&amp;#39;s not forget to document how to integrate it, and ideally to
test it as well.&lt;/p&gt;

&lt;p&gt;As an example, in &lt;a href=&quot;https://launchpad.net/launchpad&quot;&gt;Launchpad&lt;/a&gt; we use 
&lt;a href=&quot;https://launchpad.net/lazr-js&quot;&gt;lazr-js&lt;/a&gt; for our Javascript 
infrastructure. We recently changed the way it&amp;#39;s integrated into 
Launchpad, giving it a proper &lt;code&gt;setup.py&lt;/code&gt; file, so that we can generate 
an egg and depend on it through &lt;a href=&quot;http://buildout.org/&quot;&gt;Buildout&lt;/a&gt;. The 
integration issue was of course taken into account there, making sure it
was easy to build lazr-js both standalone, and when used in another 
project, like Launchpad. There was one command to build everything, 
which is simple enough. However, one thing wasn&amp;#39;t done. It wasn&amp;#39;t 
documented how you should use lazr-js in another project. Therefore,
when people continued to develop lazr-js, adding more features, and
making the build system more complicated, there wasn&amp;#39;t much thought 
about keeping it easy to build lazr-js in other projects. The build 
process became more complicated, multiple commands had to be executed.
This is fine when building lazr-js by itself, since all you have to do 
is &lt;code&gt;make build&lt;/code&gt;. However, when using lazr-js as an egg, you don&amp;#39;t have 
access the &lt;code&gt;Makefile&lt;/code&gt;, which means that you have to duplicate the build
steps. Therefore, having the build to be more than one command, makes it
harder to use elsewhere. In fact, the build process of lazr-js 
changed so much, that we didn&amp;#39;t know anymore, how to properly use the 
latest version of lazr-js in Launchpad.&lt;/p&gt;

&lt;p&gt;This is just one example of integrating external libraries. But the same
is true for code internal to the project. When developing code that is 
to be used by multiple call sites, it&amp;#39;s important to think about how 
it&amp;#39;s actually going to be used. It&amp;#39;s easy to get carried away, 
developing a, what you think, really nice API. But then when people 
start to use it, it turns out that it&amp;#39;s not so nice.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What can be done to avoid integration issue?&lt;/strong&gt; Ideally, you should 
document and test how the integration is supposed to work. By doing this,
you get a feel of how to use the API. Doctests are actually quite nice 
for this purpose. If you manage to produce a readable doctest, it&amp;#39;s 
quite probable that your API is easy enough to use.&lt;/p&gt;

&lt;p&gt;Sometimes adding tests for integration isn&amp;#39;t feasible. For example,
in the case of lazr-js is not that easy. What I do when I develop on 
lazr-js is to have a throw-away Launchpad branch, where I use my lazr-js
branch and manually make sure that it works nicely when integrated. Take a look at how it looks when integrated. What steps do you have to do to use it? Is that something that you will want to do for every call site? Are people likely to copy and paste an existing example to use your code? If the answer to the last question is yes, it&amp;#39;s not easy to use your code.&lt;/p&gt;
</description>
                <pubDate>Fri, 11 Dec 2009 18:35:12 +0200</pubDate>
                <link>http://tillenius.me/blog/2009/12/11/think-about-integration-issues</link>
                <guid isPermaLink="true">http://tillenius.me/blog/2009/12/11/think-about-integration-issues</guid>
            </item>
        
            <item>
                <title>Wanted: bzr plugin to manage branches in Launchpad</title>
                <description>&lt;p&gt;I will probably implement this myself at some point, but if anyone wants to use their &lt;a href=&quot;http://bazaar-vcs.org/&quot;&gt;bzr&lt;/a&gt; and &lt;a href=&quot;https://launchpad.net/launchpadlib&quot;&gt;launchpadlib&lt;/a&gt; skills to make the world a slightly better place, I&amp;#39;d be grateful. You don&amp;#39;t even have to have any bzr and launchpadlib skills, both are quite easy to get started with. This could be a great opportunity to learn more about them!&lt;/p&gt;

&lt;p&gt;I want a &lt;a href=&quot;http://bazaar-vcs.org/WritingPlugins&quot;&gt;bzr plugin&lt;/a&gt; that queries &lt;a href=&quot;https://launchpad.net/&quot;&gt;Launchpad&lt;/a&gt; and list all my branches that aren&amp;#39;t &lt;code&gt;Merged&lt;/code&gt; or &lt;code&gt;Abandoned&lt;/code&gt;. I want it to work in the context of a branch, so that it automatically knows which project I&amp;#39;m interested in, although having it work outside a branch and list branches for all my projects would be useful as well.&lt;/p&gt;

&lt;p&gt;To remove branches from the list of active branches, I&amp;#39;d also like to be able to mark a branch as &lt;code&gt;Abandoned&lt;/code&gt; using the plugin.&lt;/p&gt;

&lt;p&gt;Bonus points if any attached merge proposals and their status also are listed.&lt;/p&gt;
</description>
                <pubDate>Wed, 02 Dec 2009 14:20:16 +0200</pubDate>
                <link>http://tillenius.me/blog/2009/12/02/wanted-bzr-plugin-to-manage-branches-in-launchpad</link>
                <guid isPermaLink="true">http://tillenius.me/blog/2009/12/02/wanted-bzr-plugin-to-manage-branches-in-launchpad</guid>
            </item>
        
    </channel>
</rss>
